Проект "Кинотеатр ки-но"
Владелец кинотеатра пришел к вам с просьбой создать приложение которое позволит показывать расписание сеансов кино,
покупать билеты на определенные сеансы. Вам нужно создать api, которое позволит админстратору кинотеатра создавать кино, сеансы и смотреть проданные билеты.
Посетитель же сможет смотреть какие фильмы и сеансы в кинотеатре, а также покупать билеты.

-- Этап №1 Проектирование схемы базы данных. Нам необходимо хранить данные о показываемых фильмах, сеансах, проданных билетах.
Для этого создадим базу данных и схему в бд:
-- 1. Создать базу данных cinema.
Внимание, для автоматической генерации id, воспользуйтесь типом данных serial вместо int.
Serial генерирует новое значение при каждой вставке строки.
-- 2. Создать сущность фильм (с характеристиками): уникальный идентификатор, наименование фильма, описание фильма.
-- 3. В нашем кинотеатре только один зал, поэтому создадим схему рассадки.
Создать сущность место: уникальный идентификатор, номер места (например "А1")
-- 4. Создать сущность сеанс: уникальный идентификатор, идентификатор фильма(связь), дата+время(timestamp тип данных), цена.
-- 5. Создать сущность билет: уникальный идентификатор, идентификатор места (связь), идентификатор сеанса (связь), куплен или нет.
Графическое отображение того, что должно получиться здесь: https://drawsql.app/teams/vtv-1/diagrams/cinema
-- 6. Создать репозиторий и положить скрипты в файл init.sql.
-- 7. Отправить код на Github.
-- 8. Запустить создание таблиц в базе данных.

-- Этап №2 Создание java приложения. На этом этапе нужно создать spring-boot приложение, описать все наши таблицы классами - Enity.
После этого сделаем получение каждой сущности по id.
-- 1. Создать spring boot приложение, с следующими зависимостями: spring-web, lombok, spring-data-jdbc, postgresql driver,
CHECKSTYLE плагин.
-- 2. Прописать настройки для подключения к базе данных в application.yaml: url, username, password, driver. Перенести init.sql из этапа №1 п.6 в ресурсы.
-- 3. Запустить проект и проверить, что есть подключение к бд.
-- 4. Создать классы в Java, которые будут описывать записи из таблиц в базах данных:
-- 4.1 Сущность Movie - те же поля, что и в таблице.
-- 4.2 Сущность Session - id, дата+время, цена, экземпляр класса фильм(!)
-- 4.3. Сущность Place - id, имя
-- 4.4. Сущность Ticket - id, экземпляр класса сеанс(!), экземпляр класса место(!), куплен или нет.
-- 5. Создать репозиторий для работы c фильмами, внедрить jdbcTemplate (через который вы будете исполнять запросы).
Репозиторий должен уметь получать запись по id и преобразовать полученную запись в экземпляр класса Movie.
-- 5.1. Метод поиска по id должен возвращать Optional - если записи с таким id нет, метод не должен выкидывать ошибку!
-- 6. Создать репозиторий для работы с сессиями, реализовать в нем получение записи по id и преобразовать в экземпляр класса Session.
Так как session хранит в себе movie_id (идентификатор фильма), то необходимо воспользоваться воспользоваться методом получения фильма из пункта 5.
Требования аналогичны пункту 5.1.
-- 7. Создать репозиторий для работы с местом, реализовать в нем получение записи по id и преобразовать в экземпляр класса Place.
Требования аналогичны пункту 5.1.
-- 8. Создать репозиторий для работы с билетом, реализовать в нем получение записи по id и преобразовать в экземпляр класса Ticket.
Так как экземпляр класса Ticket содержит в себе session_id и place_id, то воспользоваться методами из пунктов 6 и 7 соответственно.
Требования аналогичны пункту 5.1.


Этап №3 Создание дополнительных методов в репозиториях
-- 0. Добавить 10 мест с помощью sql скрипта (т.е. запустить скрипт) и положить в скрипт fill-data.sql (папка resources).:
A1 -> A5
B1 -> B5


-- 1. Добавить в репозиторий по работе с фильмами следующие методы:
-- 1.1. Создавать метод фильм - на вход фильм без id, на выход сохраненный фильм с id. Сохраняет фильм в бд.
-- 1.1.1 Необходимо будет создать sql скрипт, который создает запись в таблице, возвращая новый сгенерированный id (используй конструкцию returning).
В скрипт нужно будет передавать данные, поэтому воспользуйтесь "?" для вставки данных в запрос.
Например вам нужно создавать фильм "1+1" с описанием "Фильм о богатом человеке и его друге".
Тогда sql шаблон будет выглядеть:
"insert into movie (name, description) values(?, ?) returning id";
-- 1.1.2 Создать фильм через jdbcTemplate и получить сгенерированный id.
-- 1.1.3 Вставить id в фильм и вернуть фильм.
-- 1.2. Отдача списка всех фильмов

2. Добавить в репозиторий по работе с сеансами следующие методы:
-- 2.1. Отдавать список всех сеансов
-- 2.2. Создавать сеанс, возвращает сеанс с id. На вход session без id. Сохраняет сеанс в бд. Аналогично пункту 1.1.

-- 3. Добавить в репозиторий по работе с билетами следующие методы:
-- 3.1. Создавать билет, возвращает билет с id. Сохраняет билет в бд. Аналогично пункту 1.1.
-- 3.2. Менять статус у билета по id на "куплен".
-- 3.2.1 Должен найти билет (этап 2, пункт 8), проверить что данный билет не куплен (если куплен, выкинуть ошибку). Обновить билет.
-- 3.3. Отдавать список купленных билетов для сеанса.
-- 3.4. Отдавать список некупленных билетов для сеанса.

-- 4. Добавить в репозиторий по работе с местами следующий метод:
-- 4.1. Получение всех мест







Этап №4 Создание функционала для администратора кинотеатра. На этоп этапе мы должны дать возможность создавать фильмы, сеансы,
а так же смотреть список купленных билетов для нашего администратора.
Все операции ниже должны проходить, только если у запроса есть заголовок user-token со значением secretadmin123.
В случае если заголовка нет или значение не то, должна возвращаться 403 ошибка (Forbidden).
-- 1. Создать endpoint POST /movie на создание фильма. Данный endpoint должен создавать в бд фильм. Возвращает созданный фильм с id.
2. Создать enpoint POST /session на создание сеанса. Данный endpoint:
-- 2.1 Создаст сеанс
-- 2.2 Получит все места
-- 2.3 Создаст некупленные билеты на каждое место в зале для этого сеанса
-- 3. Создать endpoint GET /ticket/saled который будет показывать купленные билеты.

Этап №5 Создание функционала для посетителя кинотеатра.
На этом этапе посетитель должен увидеть список фильмов которые идут, список сеансов, список свободных мест на сеанс.
Так же посетитель должен иметь возможность купить билет.
-- 1. Создать endpoint GET /movie получение всех фильмов. Формат ответа:
[
	{
		"name": "Красная жара",
		"description": "Фильм с Шварцнеггером"
	}
]
-- 2. Создать endpoint GET /session получение всех сеансов.
[
	{
	  "id": 4,
	  "movie_name": "Красная жара",
	  "date": "19.01.2024 19:00",
	  "price": 500
	}
]
-- 3. Создать endpoint GET /session/[номер сеанса]/free-place - будет отдавать список свободных мест на сеанс. Формат ответа:
['1A', '2A', '3A']







4. Создать endpoint POST /ticket/booking - будет выкупать билет на сеанс. На вход:
{
	"session_id": 4,
	"place_name": "A1"
}
4.1 Находит по session_id и номеру места билет, меняет его статус на "купленный". Возвращает id купленного билета в формате:
{
	"ticket_id": [id билета],
	"place_name": [имя места],
	"movie_name": [имя фильма],
	"date": [дата сеанса]
}
4.2 Если билет уже куплен, то отдает 415 ошибку.

Этап №6.
1. Создать описание endpoint в swagger
2. Покрыть тестами слой endpoint.